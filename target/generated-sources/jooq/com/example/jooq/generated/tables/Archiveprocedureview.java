/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;


import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Public;
import com.example.jooq.generated.tables.records.ArchiveprocedureviewRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Archiveprocedureview extends TableImpl<ArchiveprocedureviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.archiveprocedureview</code>
     */
    public static final Archiveprocedureview ARCHIVEPROCEDUREVIEW = new Archiveprocedureview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchiveprocedureviewRecord> getRecordType() {
        return ArchiveprocedureviewRecord.class;
    }

    /**
     * The column
     * <code>public.archiveprocedureview.archiveprocedureviewid</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, Integer> ARCHIVEPROCEDUREVIEWID = createField(DSL.name("archiveprocedureviewid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.archiveprocedureview.procedureid</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, Long> PROCEDUREID = createField(DSL.name("procedureid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.archiveprocedureview.name</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.archiveprocedureview.datatype</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, String> DATATYPE = createField(DSL.name("datatype"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.archiveprocedureview.dim1</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, Integer> DIM1 = createField(DSL.name("dim1"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.archiveprocedureview.dim2</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, Integer> DIM2 = createField(DSL.name("dim2"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.archiveprocedureview.scalardatastring</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, String> SCALARDATASTRING = createField(DSL.name("scalardatastring"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.archiveprocedureview.encodedarraydata</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, String> ENCODEDARRAYDATA = createField(DSL.name("encodedarraydata"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.archiveprocedureview.timestamp</code>.
     */
    public final TableField<ArchiveprocedureviewRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Archiveprocedureview(Name alias, Table<ArchiveprocedureviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private Archiveprocedureview(Name alias, Table<ArchiveprocedureviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.archiveprocedureview</code> table
     * reference
     */
    public Archiveprocedureview(String alias) {
        this(DSL.name(alias), ARCHIVEPROCEDUREVIEW);
    }

    /**
     * Create an aliased <code>public.archiveprocedureview</code> table
     * reference
     */
    public Archiveprocedureview(Name alias) {
        this(alias, ARCHIVEPROCEDUREVIEW);
    }

    /**
     * Create a <code>public.archiveprocedureview</code> table reference
     */
    public Archiveprocedureview() {
        this(DSL.name("archiveprocedureview"), null);
    }

    public <O extends Record> Archiveprocedureview(Table<O> child, ForeignKey<O, ArchiveprocedureviewRecord> key) {
        super(child, key, ARCHIVEPROCEDUREVIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ArchiveprocedureviewRecord, Integer> getIdentity() {
        return (Identity<ArchiveprocedureviewRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArchiveprocedureviewRecord> getPrimaryKey() {
        return Keys.ARCHIVEPROCEDUREVIEW_PKEY;
    }

    @Override
    public Archiveprocedureview as(String alias) {
        return new Archiveprocedureview(DSL.name(alias), this);
    }

    @Override
    public Archiveprocedureview as(Name alias) {
        return new Archiveprocedureview(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Archiveprocedureview rename(String name) {
        return new Archiveprocedureview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Archiveprocedureview rename(Name name) {
        return new Archiveprocedureview(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Long, String, String, Integer, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
